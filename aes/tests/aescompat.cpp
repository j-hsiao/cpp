//TODO use compat
#include "aes/aes.hpp"
#include "aes/defs.hpp"

#include <string>
#include <map>
#include <vector>
#include <iostream>

struct TestCase
{
	const aes::compat::Version version;
	const std::string key;
	const std::string text;
	const std::string ecb;
	const std::string cbc;
};

const std::string key(
	"Thats my Kung Fu"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	32);
const std::string text1("Two One Nine Two");
const std::string text2("");
const std::string text3("hello world");
const std::string text4("goodbye world");
const std::string text5("Peter Piper picked a pickled plum or something");

static const std::vector<TestCase> testcases = {
	{aes::compat::Version::v128, key, text1,
		{"\x29\xc3\x50\x5f\x57\x14\x20\xf6\x40\x22\x99\xb3\x1a\x02\xd7\x3a"
		"\xb3\xe4\x6f\x11\xba\x8d\x2b\x97\xc1\x87\x69\x44\x9a\x89\xe8\x68", 32},
		{"\x29\xc3\x50\x5f\x57\x14\x20\xf6\x40\x22\x99\xb3\x1a\x02\xd7\x3a"
		"\x5f\x59\x17\xec\x37\x6a\x3a\x26\x9e\xfa\xdb\x6b\x2d\x61\xe4\xe3", 32}},
	{aes::compat::Version::v192, key, text1,
		{"\x36\x54\x13\xa3\x43\x69\x1c\xe6\xe2\x3c\x7a\x67\x2b\xd1\xa6\x95"
		"\x94\xd0\x65\xae\x4c\xa2\xcc\x68\x26\xb1\xff\xa2\xeb\xe7\xb1\x15", 32},
		{"\x36\x54\x13\xa3\x43\x69\x1c\xe6\xe2\x3c\x7a\x67\x2b\xd1\xa6\x95"
		"\x46\x67\xe2\x55\xb6\x9f\x32\x5b\x51\x39\xd3\x6f\x25\xed\xdf\x07", 32}},
	{aes::compat::Version::v256, key, text1,
		{"\x52\x10\x75\x19\x27\x02\x73\x64\xcf\x67\x8e\x1c\xd8\x5e\xe3\x6e"
		"\x28\x5e\x59\x18\x68\xd1\xb7\x1b\x39\x94\xbd\xc6\xf4\x27\x8c\xff", 32},
		{"\x52\x10\x75\x19\x27\x02\x73\x64\xcf\x67\x8e\x1c\xd8\x5e\xe3\x6e"
		"\xa7\x4c\x1d\x7e\xc4\x5e\x53\xcc\x11\x13\x6a\x72\x97\xa3\x98\x19", 32}},
	{aes::compat::Version::v128, key, text2,
		{"\xb3\xe4\x6f\x11\xba\x8d\x2b\x97\xc1\x87\x69\x44\x9a\x89\xe8\x68", 16},
		{"\xb3\xe4\x6f\x11\xba\x8d\x2b\x97\xc1\x87\x69\x44\x9a\x89\xe8\x68", 16}},
	{aes::compat::Version::v192, key, text2,
		{"\x94\xd0\x65\xae\x4c\xa2\xcc\x68\x26\xb1\xff\xa2\xeb\xe7\xb1\x15", 16},
		{"\x94\xd0\x65\xae\x4c\xa2\xcc\x68\x26\xb1\xff\xa2\xeb\xe7\xb1\x15", 16}},
	{aes::compat::Version::v256, key, text2,
		{"\x28\x5e\x59\x18\x68\xd1\xb7\x1b\x39\x94\xbd\xc6\xf4\x27\x8c\xff", 16},
		{"\x28\x5e\x59\x18\x68\xd1\xb7\x1b\x39\x94\xbd\xc6\xf4\x27\x8c\xff", 16}},
	{aes::compat::Version::v128, key, text3,
		{"\x8f\x6a\x98\x5e\x1e\xb9\xe7\xd8\xec\xb5\xa4\x06\x86\x50\xb0\xeb", 16},
		{"\x8f\x6a\x98\x5e\x1e\xb9\xe7\xd8\xec\xb5\xa4\x06\x86\x50\xb0\xeb", 16}},
	{aes::compat::Version::v192, key, text3,
		{"\x19\xbe\x35\xd1\x6c\xf3\x04\x50\x49\x80\x07\xea\x15\x72\x78\x95", 16},
		{"\x19\xbe\x35\xd1\x6c\xf3\x04\x50\x49\x80\x07\xea\x15\x72\x78\x95", 16}},
	{aes::compat::Version::v256, key, text3,
		{"\xda\x3a\xd0\xeb\x27\x87\x22\x18\xed\x2b\xb0\xd2\xed\xec\x54\xe3", 16},
		{"\xda\x3a\xd0\xeb\x27\x87\x22\x18\xed\x2b\xb0\xd2\xed\xec\x54\xe3", 16}},
	{aes::compat::Version::v128, key, text4,
		{"\x4c\x40\x63\x3f\xff\x12\xf6\xc9\x17\x5c\xc3\x23\x2d\x4a\xcc\xd6", 16},
		{"\x4c\x40\x63\x3f\xff\x12\xf6\xc9\x17\x5c\xc3\x23\x2d\x4a\xcc\xd6", 16}},
	{aes::compat::Version::v192, key, text4,
		{"\xc0\x49\xfd\x83\x7a\xb8\x46\xbf\xd6\x84\x52\x58\xca\xe4\xbb\xbe", 16},
		{"\xc0\x49\xfd\x83\x7a\xb8\x46\xbf\xd6\x84\x52\x58\xca\xe4\xbb\xbe", 16}},
	{aes::compat::Version::v256, key, text4,
		{"\xe9\x3d\x70\x64\x3c\x1c\xc2\xa8\x30\x87\x90\x4e\xa3\x61\x72\x52", 16},
		{"\xe9\x3d\x70\x64\x3c\x1c\xc2\xa8\x30\x87\x90\x4e\xa3\x61\x72\x52", 16}},
	{aes::compat::Version::v128, key, text5,
		{"\x4d\x74\x9f\xcd\x5c\x3b\x4a\xc4\xeb\xb3\x0c\x8c\xbb\x61\xe7\xb5"
		"\x29\xb0\x21\xf0\x55\x99\x9e\x55\xd9\x7d\xb0\x74\x80\x51\x5f\xa1"
		"\xe1\x7e\xeb\x48\xa0\x7f\x71\x89\x73\xd4\x59\xd7\x97\xe2\xb8\xa8", 48},
		{"\x4d\x74\x9f\xcd\x5c\x3b\x4a\xc4\xeb\xb3\x0c\x8c\xbb\x61\xe7\xb5"
		"\x21\xec\xed\xe4\xd7\x66\x88\xb2\xed\xd0\x1d\xab\x6a\x56\x09\x48"
		"\x9c\xcf\x48\xa9\x2e\xfe\x3c\x4c\xe4\x88\x40\x5c\xfd\xf0\x84\x3b", 48}},
	{aes::compat::Version::v192, key, text5,
		{"\xb3\x7e\xce\x96\x49\x50\x0c\x4d\x2c\xba\x81\x48\x0b\x9e\x16\x4b"
		"\xee\x7d\x0e\x1c\xcb\xc4\x82\x48\x85\x49\xcc\x9b\x65\x41\x34\x56"
		"\x7e\x73\xb1\x21\x5f\x38\x73\xc7\xce\x41\xdf\x06\x3f\x95\xba\x81", 48},
		{"\xb3\x7e\xce\x96\x49\x50\x0c\x4d\x2c\xba\x81\x48\x0b\x9e\x16\x4b"
		"\x7f\x68\x36\x08\x37\x41\x46\x90\x2c\xb9\x02\x36\xc6\xf2\xfa\xea"
		"\x11\x2a\xc1\x15\x4d\xa7\xca\x1a\xb8\x57\xee\x45\x16\x8c\x50\x88", 48}},
	{aes::compat::Version::v256, key, text5,
		{"\x7a\x9e\x53\x3c\x11\x08\x20\x71\x4f\x0a\xa2\x61\xc7\xd2\xbc\x33"
		"\xc7\xd6\x9f\x40\x54\xe2\x49\x53\x72\x85\xdc\x80\xb0\x99\x69\xd8"
		"\x79\xf6\xbf\x16\x1a\x94\xa3\x26\xcd\x0f\xc1\x2a\xab\x7c\x71\x61", 48},
		{"\x7a\x9e\x53\x3c\x11\x08\x20\x71\x4f\x0a\xa2\x61\xc7\xd2\xbc\x33"
		"\xb1\x67\xed\x5f\xc3\x64\x23\x0c\x26\x1e\x69\x98\x79\x29\x6c\x59"
		"\xe3\xbf\xa0\x68\xf6\x5d\xf7\xc5\xb2\xd2\x55\xd7\xbd\xd0\x09\xe6", 48}}
};

int check(const TestCase &info, aes::compat::Implementation impl)
{
	const char* names[] = {"  aes128", "  aes192", "  aes256"};
	std::cerr << names[static_cast<int>(info.version)]
		<< " \"" << info.text << '"' << std::endl;

	aes::compat::Codec codec(info.key, info.version, impl);

	std::string ecb = codec.encrypt_ecb(info.text);
	std::string cbc = codec.encrypt_cbc(info.text);
	if (ecb != info.ecb)
	{
		std::cerr << "encrypt ecb failed" << std::endl;
		aes::hexlog(ecb);
		aes::hexlog(info.ecb);
		return 1;
	}
	if (cbc != info.cbc)
	{
		std::cerr << "encrypt cbc failed" << std::endl;
		aes::hexlog(cbc);
		aes::hexlog(info.cbc);
		return 1;
	}

	std::string recb = codec.decrypt_ecb(ecb);
	std::string rcbc = codec.decrypt_cbc(cbc);

	if (recb != info.text)
	{
		std::cerr << "decrypt ecb failed" << std::endl;
		aes::hexlog(recb);
		aes::hexlog(info.text);
		return 1;
	}
	if (rcbc != info.text)
	{
		std::cerr << "decrypt cbc failed" << std::endl;
		aes::hexlog(rcbc);
		aes::hexlog(info.text);
		return 1;
	}
	return 0;
}

int main(int argc, char *argv[])
{
	std::map<aes::compat::Implementation, std::string> impls = {
		{aes::compat::Implementation::ssl, "ssl"},
		{aes::compat::Implementation::sslaes, "sslaes"},
		{aes::compat::Implementation::aesni, "aesni"},
		{aes::compat::Implementation::sse, "sse"},
		{aes::compat::Implementation::ui32, "ui32"},
		{aes::compat::Implementation::uil32, "uil32"},
		{aes::compat::Implementation::plain, "plain"}
	};
	for (auto impl : impls)
	{
		std::cerr << "testing " << impl.second << std::endl;
		for (const TestCase &testcase : testcases)
		{ check(testcase, impl.first); }
	}
}
