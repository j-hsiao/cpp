cmake_minimum_required(VERSION 3.0)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
project(os)

include(CTest)
include("${CMAKE_CURRENT_LIST_DIR}/../common.cmake" NO_POLICY_SCOPE)

if (MSVC)
	add_library(os ./src/os_win.cpp)
else()
	add_library(os ./src/os_posix.cpp)
endif()
configure_dll()
install_project(include/os)
target_include_directories(
	os PRIVATE "${CMAKE_CURRENT_LIST_DIR}/../tlog")


if (BUILD_TESTING)
	find_package(argparse QUIET)
	if (argparse_FOUND)
		set(argparse_target argparse::argparse)
	else()
		add_subdirectory("${CMAKE_CURRENT_LIST_DIR}/../argparse" argparse)
		set(argparse_target argparse)
	endif()
	find_package(timeutil QUIET)
	if (timeutil_FOUND)
		set(timeutil_target timeutil::timeutil)
	else()
		add_subdirectory("${CMAKE_CURRENT_LIST_DIR}/../timeutil" timeutil)
		set(timeutil_target timeutil)
	endif()

	add_executable(ec src/ec.cpp)
	target_link_libraries(ec PRIVATE ${argparse_target})

	add_executable(path ./tests/path.cpp)
	target_link_libraries(path PRIVATE os)
	add_test(NAME path COMMAND path)

	add_executable(ls ./tests/ls.cpp)
	target_link_libraries(ls PRIVATE os ${argparse_target})
	add_executable(ftype ./tests/ftype.cpp)
	target_link_libraries(ftype PRIVATE os)
	add_executable(mkdir ./tests/mkdir.cpp)
	target_link_libraries(mkdir PRIVATE os)
	add_executable(rm ./tests/rm.cpp)
	target_link_libraries(rm PRIVATE os)
	add_executable(mv ./tests/mv.cpp)
	target_link_libraries(mv PRIVATE os)
	add_executable(sysdir ./tests/sysdir.cpp)
	target_link_libraries(sysdir PRIVATE os)
	add_executable(pass ./tests/pass.cpp)
	target_link_libraries(pass PRIVATE os)
	add_executable(hide ./tests/hide.cpp)
	target_link_libraries(hide PRIVATE os ${timeutil_target})

	add_executable(getenv ./tests/getenv.cpp)
	target_link_libraries(getenv PRIVATE os ${timeutil_target})
endif()
